package com.example.uniqueartifacts.views

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.uniqueartifacts.R

@Composable
fun Buscador(navController: NavController) {
    Box(modifier = Modifier.fillMaxSize()) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(bottom = 100.dp) // 游늷 Deja espacio para la barra inferior
                .background(Color.Black)
                .padding(horizontal = 16.dp)
        ) {
            Spacer(modifier = Modifier.height(50.dp))

            // 游댌 Barra de b칰squeda
            var searchText by remember { mutableStateOf("") }
            OutlinedTextField(
                value = searchText,
                onValueChange = { searchText = it },
                placeholder = { Text("Buscar ...", color = Color.Gray) },
                leadingIcon = {
                    Image(
                        painter = painterResource(id = R.drawable.lupa_negra),
                        contentDescription = "Buscar",
                        modifier = Modifier.size(24.dp) // 游늷 Tama침o ajustado
                    )
                },
                trailingIcon = {
                    Image(
                        painter = painterResource(id = R.drawable.micro),
                        contentDescription = "Micr칩fono",
                        modifier = Modifier.size(24.dp) // 游늷 Tama침o ajustado
                    )
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .clip(RoundedCornerShape(15.dp))
                    .background(Color(0xFFC3C3C3)),
            )

            Spacer(modifier = Modifier.height(25.dp))

            // 游빐 Descubrir
            Text("Descubrir", color = Color.White, fontSize = 20.sp, fontWeight = FontWeight.Bold)
            Spacer(modifier = Modifier.height(8.dp))
            val discoverItems = listOf(
                "merchandising en oferta",
                "camisetas en oferta",
                "칰ltimas existencias en figuras",
                "novedades funko pops"
            )
            discoverItems.forEachIndexed { index, item ->
                Text(
                    text = item,
                    color = Color.Red,
                    fontSize = 16.sp,
                    modifier = Modifier.padding(vertical = 8.dp)
                )
                if (index < discoverItems.lastIndex) {
                    Divider(color = Color.DarkGray, thickness = 1.dp)
                }
            }

            Spacer(modifier = Modifier.height(25.dp))

            // 游꿢 Sugerencias
            Text("Sugerencias", color = Color.White, fontSize = 20.sp, fontWeight = FontWeight.Bold)

            Spacer(modifier = Modifier.height(10.dp))

            val sugerencias = listOf(
                Triple("Camiseta Zelda", "Art칤culo nuevo", R.drawable.camiseta2),
                Triple("Funko Pop Harry", "Art칤culo Demandado", R.drawable.pops),
                Triple("Funko Pop Shelby", "Art칤culo Demandado", R.drawable.pop_sustituir)
            )

            LazyColumn(
                modifier = Modifier.fillMaxWidth(),
                verticalArrangement = Arrangement.spacedBy(8.dp),
                contentPadding = PaddingValues(bottom = 120.dp)
            ) {
                items(sugerencias) { (nombre, subtitulo, imagen) ->
                    SugerenciaItem(nombre, subtitulo, imagen)
                }
            }

        }

        // 游댵 BARRA INFERIOR EXACTA A LA DE HOME 游댵
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(100.dp)
                .background(Color.Black)
                .align(Alignment.BottomCenter)
        ) {
            val currentRoute = "buscar" // 游녤 Cambia esto din치micamente si usas NavBackStackEntry
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp),
                horizontalArrangement = Arrangement.SpaceAround,
                verticalAlignment = Alignment.CenterVertically
            ) {
                val items = listOf(
                    Triple("HOME", if (currentRoute == "pantallaHome") R.drawable.logo_rojo else R.drawable.logo_gris, "pantallaHome"),
                    Triple("BUSCAR", if (currentRoute == "buscar") R.drawable.lupa_a else R.drawable.lupa, "buscar"),
                    Triple("OFERTAS", R.drawable.rebajas, "ofertas"),
                    Triple("GUARDADOS", R.drawable.guardado, "guardados"),
                    Triple("AJUSTES", R.drawable.ajustes, "ajustes")
                )

                items.forEach { (label, icon, route) ->
                    Button(
                        onClick = {
                            if (route != currentRoute) {
                                navController.navigate(route) {
                                    popUpTo("pantallaHome") { inclusive = false }
                                    launchSingleTop = true
                                }
                            }
                        },
                        colors = ButtonDefaults.buttonColors(containerColor = Color.Transparent),
                        elevation = ButtonDefaults.buttonElevation(0.dp),
                        contentPadding = PaddingValues(0.dp),
                        modifier = Modifier.weight(1f)
                    ) {
                        Column(horizontalAlignment = Alignment.CenterHorizontally) {
                            Image(
                                painter = painterResource(id = icon),
                                contentDescription = label,
                                modifier = Modifier.size(24.dp)
                            )
                            Spacer(modifier = Modifier.height(4.dp))
                            Text(
                                text = label,
                                fontSize = 12.sp,
                                fontWeight = if (currentRoute == route) FontWeight.Bold else FontWeight.Normal,
                                color = if (currentRoute == route) Color.White else Color.Gray,
                                textAlign = TextAlign.Center,
                                maxLines = 1,
                                overflow = TextOverflow.Clip,
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .padding(horizontal = 4.dp)
                            )
                        }
                    }
                }
            }
        }
    }
}



@Composable
fun SugerenciaItem(nombre: String, subtitulo: String, imageRes: Int) {
    Column {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 10.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = imageRes),
                contentDescription = nombre,
                modifier = Modifier
                    .size(60.dp)
                    .clip(RoundedCornerShape(10.dp))
                    .background(Color.White)
            )

            Spacer(modifier = Modifier.width(16.dp))

            Column(modifier = Modifier.weight(1f)) {
                Text(nombre, color = Color.White, fontWeight = FontWeight.Bold, fontSize = 16.sp)
                Text(subtitulo, color = Color.Gray, fontSize = 14.sp)
            }

            Button(
                onClick = { /* l칩gica del carrito */ },
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFFF6B6B)),
                shape = RoundedCornerShape(50.dp),
                contentPadding = PaddingValues(horizontal = 20.dp, vertical = 6.dp),
                modifier = Modifier.height(36.dp)
            ) {
                Text("A침adir al Carrito", color = Color.White, fontSize = 13.sp)
            }
        }

        Divider(color = Color.Gray.copy(alpha = 0.4f), thickness = 1.dp)
    }
}



