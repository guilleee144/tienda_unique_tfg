package com.example.uniqueartifacts.views
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.material3.DrawerValue
import androidx.compose.material3.ModalNavigationDrawer
import androidx.compose.material3.rememberDrawerState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.uniqueartifacts.R
import com.example.uniqueartifacts.viewmodel.GuardadosViewModel
import kotlinx.coroutines.launch
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import androidx.compose.ui.focus.focusModifier
import androidx.compose.ui.layout.ContentScale
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.uniqueartifacts.viewmodel.CarritoViewModel


@Composable
fun DetalleProducto(
    navController: NavController,
    guardadosViewModel: GuardadosViewModel,
    carritoViewModel: CarritoViewModel = viewModel() // ⬅️ se agrega aquí
){
    val scrollState = rememberScrollState()
    val drawerState = rememberDrawerState(DrawerValue.Closed)
    val scope = rememberCoroutineScope()

    ModalNavigationDrawer(
        drawerState = drawerState,
        gesturesEnabled = false,
        drawerContent = {
            Row {
                DismissibleDrawerSheet(
                    modifier = Modifier.fillMaxWidth(0.75f),
                    drawerContainerColor = Color.Black
                ) {
                    MenuLateral(navController = navController) {
                        scope.launch { drawerState.close() }
                    }
                }
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .clickable { scope.launch { drawerState.close() } }
                )
            }
        },
        content = {
            Box(modifier = Modifier.fillMaxSize()) {
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(bottom = 100.dp)
                        .verticalScroll(scrollState)
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(Color.Black)
                            .padding(top = 40.dp)
                            .padding(horizontal = 16.dp, vertical = 8.dp)
                    ) {
                        Column {
                            Row(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .padding(vertical = 8.dp),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Spacer(modifier = Modifier.weight(0.1f))
                                Image(
                                    painter = painterResource(id = R.drawable.grefg),
                                    contentDescription = "Profile",
                                    modifier = Modifier
                                        .size(45.dp)
                                        .clip(CircleShape)
                                        .clickable { scope.launch { drawerState.open() } },
                                    contentScale = ContentScale.Crop
                                )
                                Spacer(modifier = Modifier.weight(0.9f))
                                Image(
                                    painter = painterResource(id = R.drawable.logo_rojo),
                                    contentDescription = "Logo",
                                    modifier = Modifier.size(50.dp)
                                )
                                Spacer(modifier = Modifier.weight(1f))
                                Image(
                                    painter = painterResource(id = R.drawable.cesta),
                                    contentDescription = "Carrito",
                                    modifier = Modifier.size(30.dp)
                                )
                                Spacer(modifier = Modifier.weight(0.1f))
                            }
                            Spacer(modifier = Modifier.height(8.dp))
                            var searchText by remember { mutableStateOf("") }
                            Box(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .height(56.dp)
                                    .background(Color.Transparent),
                                contentAlignment = Alignment.Center
                            ) {
                                OutlinedTextField(
                                    value = searchText,
                                    onValueChange = { searchText = it },
                                    placeholder = { Text("Buscar ...", color = Color.Gray) },
                                    leadingIcon = {
                                        Image(
                                            painter = painterResource(id = R.drawable.lupa_negra),
                                            contentDescription = "Buscar",
                                            modifier = Modifier.size(24.dp)
                                        )
                                    },
                                    trailingIcon = {
                                        Image(
                                            painter = painterResource(id = R.drawable.micro),
                                            contentDescription = "Micrófono",
                                            modifier = Modifier.size(24.dp)
                                        )
                                    },
                                    modifier = Modifier
                                        .fillMaxWidth(0.92f)
                                        .height(50.dp)
                                        .clip(RoundedCornerShape(12.dp))
                                        .background(Color(0xFFC3C3C3))
                                )
                            }
                        }
                    }

                    // 🧾 Contenido de producto
                    Column(modifier = Modifier.padding(16.dp)) {

                        val miniaturas = listOf(
                            R.drawable.pops,
                            R.drawable.pop_sustituir,
                            R.drawable.camiseta2
                        )

                        var imagenSeleccionada by remember { mutableStateOf(miniaturas[0]) }

                        Column(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(horizontal = 16.dp),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {

                            // 🔹 Galería (miniaturas + imagen principal)
                            Row(
                                verticalAlignment = Alignment.CenterVertically
                            ) {

                                // 🖼 Miniaturas
                                Column(
                                    modifier = Modifier
                                        .height(260.dp)
                                        .width(80.dp),
                                    verticalArrangement = Arrangement.SpaceBetween,
                                    horizontalAlignment = Alignment.CenterHorizontally
                                ) {
                                    miniaturas.forEach { imagen ->
                                        Image(
                                            painter = painterResource(id = imagen),
                                            contentDescription = "Miniatura",
                                            modifier = Modifier
                                                .size(72.dp)
                                                .border(
                                                    width = if (imagen == imagenSeleccionada) 2.dp else 1.dp,
                                                    color = if (imagen == imagenSeleccionada) Color(0xFF76B8FF) else Color.LightGray,
                                                    shape = RoundedCornerShape(8.dp)
                                                )
                                                .clickable {
                                                    imagenSeleccionada = imagen
                                                }
                                        )
                                    }
                                }

                                Spacer(modifier = Modifier.width(12.dp))

                                // 🖼 Imagen principal
                                Box(
                                    modifier = Modifier
                                        .height(260.dp)
                                        .weight(1f)
                                        .border(1.dp, Color.LightGray, shape = RoundedCornerShape(16.dp))
                                        .padding(8.dp)
                                ) {
                                    Image(
                                        painter = painterResource(id = imagenSeleccionada),
                                        contentDescription = "Imagen principal",
                                        modifier = Modifier.fillMaxSize()
                                    )
                                }
                            }

                            Spacer(modifier = Modifier.height(20.dp))

                            // 🔤 Info de producto debajo
                            Text(
                                text = "Funko Pop Arcane - Vi (1601)",
                                fontWeight = FontWeight.Bold,
                                fontSize = 18.sp,
                                modifier = Modifier.padding(bottom = 8.dp)
                            )
                            Text(
                                text = "294,35€",
                                fontWeight = FontWeight.Bold,
                                fontSize = 22.sp,
                                color = Color.Black,
                                modifier = Modifier.padding(bottom = 16.dp)
                            )
                            val productoActual = Producto(
                                nombre = "Funko Pop Arcane",
                                precio = "294.35", // solo número, sin €
                                imagenRes = imagenSeleccionada
                            )

                            // 🛒 Botón
                            Button(
                                onClick = {
                                    carritoViewModel.agregarAlCarrito(productoActual)
                                },
                                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFFF6B6B)),
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .height(48.dp),
                                shape = RoundedCornerShape(30.dp)
                            ) {
                                Text("Añadir al Carrito", color = Color.White, fontWeight = FontWeight.Bold)
                            }

                            Spacer(modifier = Modifier.height(24.dp))
                        }

                        // 📝 Descripción del producto
                        Divider(modifier = Modifier.padding(vertical = 8.dp), color = Color.LightGray)
                        Spacer(modifier = Modifier.height(15.dp))

                        Text(
                            text = "Descripción del producto",
                            fontWeight = FontWeight.Bold,
                            fontSize = 16.sp,
                            modifier = Modifier.padding(bottom = 4.dp)
                        )
                        Spacer(modifier = Modifier.height(5.dp))
                        Text(
                            text = "Funko Pop! TV: Arcane LOL - VI Arcane: League of Legends - Figura de Vinilo Coleccionable " +
                                    "Idea de Regalo - Mercancía Oficial - Juguetes para Niños y Adultos - TV Fans",
                            fontSize = 14.sp,
                            lineHeight = 20.sp,
                            color = Color.Black
                        )
                        Spacer(modifier = Modifier.height(15.dp))
                        Divider(modifier = Modifier.padding(vertical = 16.dp), color = Color.LightGray)
                        Spacer(modifier = Modifier.height(15.dp))

                        val productosSimilares = listOf(
                            Pair(R.drawable.pops, "Funko John Wick"),
                            Pair(R.drawable.pop_sustituir, "Funko Darth Vader"),
                            Pair(R.drawable.camiseta2, "Funko Goku"),
                            Pair(R.drawable.pops, "Funko Luffy")
                        )

                        Text(
                            text = "Otras Compras en Tendencia \uD83D\uDD25",
                            fontWeight = FontWeight.Bold,
                            fontSize = 16.sp,
                            modifier = Modifier.padding(bottom = 12.dp)
                        )

                        Column(modifier = Modifier.fillMaxWidth()) {
                            productosSimilares.chunked(2).forEach { fila ->
                                Row(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(vertical = 4.dp),
                                    horizontalArrangement = Arrangement.SpaceEvenly
                                ) {
                                    fila.forEach { (imagen, titulo) ->
                                        Row(
                                            modifier = Modifier
                                                .width(160.dp)
                                                .padding(4.dp),
                                            verticalAlignment = Alignment.CenterVertically
                                        ) {
                                            // 🖼 Imagen a la izquierda
                                            Image(
                                                painter = painterResource(id = imagen),
                                                contentDescription = titulo,
                                                modifier = Modifier
                                                    .size(64.dp)
                                                    .clip(RoundedCornerShape(8.dp))
                                            )

                                            Spacer(modifier = Modifier.width(8.dp))

                                            // 🔤 Texto + Botón a la derecha
                                            Column(
                                                modifier = Modifier.weight(1f)
                                            ) {
                                                Text(
                                                    text = titulo,
                                                    fontSize = 13.sp,
                                                    color = Color.Gray,
                                                    maxLines = 2
                                                )
                                                Spacer(modifier = Modifier.height(4.dp))
                                                Button(
                                                    onClick = { /* Acción */ },
                                                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFE0E0E0)),
                                                    shape = RoundedCornerShape(20.dp),
                                                    contentPadding = PaddingValues(horizontal = 12.dp, vertical = 4.dp),
                                                    elevation = ButtonDefaults.buttonElevation(2.dp),
                                                    modifier = Modifier.height(30.dp) .width(120.dp),
                                                ) {
                                                    Text(
                                                        text = "Ver Producto",
                                                        fontSize = 9.sp,
                                                        color = Color.Black,
                                                        fontWeight = FontWeight.Medium,
                                                        modifier = Modifier.padding(0.dp)
                                                    )
                                                }
                                            }
                                        }
                                    }

                                    // Si hay un producto impar, deja espacio para alinear
                                    if (fila.size == 1) {
                                        Spacer(modifier = Modifier.width(160.dp))
                                    }
                                }
                            }
                        }

                    }

                    Spacer(modifier = Modifier.height(40.dp))
                }

                Column(
                    modifier = Modifier.align(Alignment.BottomCenter)
                ) {
                    Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(20.dp)
                        .background(Color.Black)
                    )
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(100.dp)
                            .background(Color.Black)
                    ) {
                        val currentRoute = navController.currentBackStackEntry?.destination?.route

                        val items = listOf(
                            Triple("HOME", if (currentRoute == "pantallaHome") R.drawable.logo_rojo else R.drawable.logo_gris, "pantallaHome"),
                            Triple("BUSCAR", if (currentRoute == "buscador") R.drawable.lupa_a else R.drawable.lupa, "buscador"),
                            Triple("OFERTAS", R.drawable.rebajas, "ofertas"),
                            Triple("GUARDADOS", R.drawable.guardado, "guardados"),
                            Triple("AJUSTES", R.drawable.ajustes, "ajustes")
                        )

                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(horizontal = 16.dp),
                            horizontalArrangement = Arrangement.SpaceAround,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            items.forEach { (label, icon, route) ->
                                Button(
                                    onClick = {
                                        if (route != currentRoute) {
                                            navController.navigate(route) {
                                                popUpTo("pantallaHome") { inclusive = false }
                                                launchSingleTop = true
                                            }
                                        }
                                    },
                                    colors = ButtonDefaults.buttonColors(containerColor = Color.Transparent),
                                    elevation = ButtonDefaults.buttonElevation(0.dp),
                                    contentPadding = PaddingValues(0.dp),
                                    modifier = Modifier.weight(1f)
                                ) {
                                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                                        Image(
                                            painter = painterResource(id = icon),
                                            contentDescription = label,
                                            modifier = Modifier.size(24.dp)
                                        )
                                        Spacer(modifier = Modifier.height(4.dp))
                                        Text(
                                            text = label,
                                            fontSize = 12.sp,
                                            fontWeight = if (currentRoute == route) FontWeight.Bold else FontWeight.Normal,
                                            color = if (currentRoute == route) Color.White else Color.Gray,
                                            textAlign = TextAlign.Center,
                                            maxLines = 1,
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .padding(horizontal = 4.dp)
                                        )
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    )

}
