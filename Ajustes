package com.example.uniqueartifacts.views

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.animateColor
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.animateDp
import androidx.compose.animation.core.tween
import androidx.compose.animation.core.updateTransition
import androidx.compose.animation.slideInVertically
import androidx.compose.animation.slideOutVertically
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.NavHostController
import com.example.uniqueartifacts.R
import com.example.uniqueartifacts.viewmodel.GuardadosViewModel

@Composable
fun Ajustes(
    navController: NavController
) {
    val offsetY = remember { Animatable(1000f) }

    // ðŸ”¥ Efecto de deslizamiento al entrar
    LaunchedEffect(Unit) {
        offsetY.animateTo(
            targetValue = 0f,
            animationSpec = tween(durationMillis = 400, easing = FastOutSlowInEasing)
        )
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .offset(y = offsetY.value.dp)
            .background(Color.White)
    ) {
        Column(modifier = Modifier.fillMaxSize()) {

            Spacer(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(70.dp)
                    .background(Color.Black)
            )

            // âœ… Cabecera con navegaciÃ³n al Home
            CabeceraAjustes(onCerrar = {
                navController.navigate("pantallaHome") {
                    popUpTo("pantallaHome") { inclusive = false }
                    launchSingleTop = true
                }
            })

            val scrollState = rememberScrollState()

            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .verticalScroll(scrollState)
                    .padding(horizontal = 20.dp)
            ) {
                Spacer(modifier = Modifier.height(20.dp))

                repeat(2) {
                    Text(
                        text = "OTROS AJUSTES",
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Medium,
                        color = Color.Gray,
                        modifier = Modifier.padding(vertical = 10.dp)
                    )

                    repeat(3) {
                        var isChecked by remember { mutableStateOf(false) }

                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 8.dp),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text("Tema", fontSize = 16.sp, fontWeight = FontWeight.Bold)

                            BotonActivarNotis(
                                checked = isChecked,
                                onCheckedChange = { isChecked = it }
                            )
                        }
                    }
                }

                Spacer(modifier = Modifier.height(30.dp))

                Text(
                    text = "Â©2025 UNIQUE ARTIFACTS STORE",
                    fontSize = 12.sp,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(bottom = 20.dp),
                    textAlign = TextAlign.Center
                )
            }
        }
    }
}

@Composable
fun CabeceraAjustes(onCerrar: () -> Unit) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.Black)
    ) {
        Spacer(modifier = Modifier.height(10.dp))

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))
                .background(Color(0xFFF7F6F3))
                .height(60.dp)
        ) {
            Row(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                IconButton(onClick = onCerrar) {
                    Icon(
                        painter = painterResource(id = R.drawable.cerrar),
                        contentDescription = "Cerrar",
                        tint = Color.Black,
                        modifier = Modifier.size(20.dp)
                    )
                }

                Spacer(modifier = Modifier.weight(1f))

                Text(
                    text = "ConfiguraciÃ³n",
                    fontWeight = FontWeight.Bold,
                    fontSize = 20.sp,
                    color = Color.Black,
                    modifier = Modifier
                        .align(Alignment.CenterVertically)
                        .offset(x = (-16).dp)
                )

                Spacer(modifier = Modifier.weight(1f))
            }
        }
    }
}



@Composable
fun BotonActivarNotis(
    checked: Boolean,
    onCheckedChange: (Boolean) -> Unit
) {
    val transition = updateTransition(targetState = checked, label = "switch")
    val offset by transition.animateDp(label = "offset") {
        if (it) 34.dp else 4.dp
    }

    val backgroundColor by transition.animateColor(label = "background") {
        if (it) Color(0xFF3598DB) else Color(0xFFDCDCDC)
    }

    Box(
        modifier = Modifier
            .width(60.dp)
            .height(28.dp) // ðŸ”½ mÃ¡s bajito
            .clip(RoundedCornerShape(50))
            .background(backgroundColor)
            .clickable { onCheckedChange(!checked) },
        contentAlignment = Alignment.CenterStart
    ) {
        Box(
            modifier = Modifier
                .offset(x = offset)
                .size(22.dp) // ðŸ”½ cÃ­rculo mÃ¡s pequeÃ±o
                .clip(CircleShape)
                .background(Color.White)
        )
    }
}







